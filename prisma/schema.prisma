generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
    provider = "node node_modules/prisma-nestjs-graphql"
    // for yarn monorepos
    // provider = "prisma-nestjs-graphql"
    output = "../src/@generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        String    @id(map: "PK_8c82d7f526340ab734260ea46be") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  timestamp BigInt
  name      String @db.VarChar
}

model otp {
  id          String   @id(map: "PK_32556d9d7b22031d7d0e1fd6723") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String   @db.Uuid
  otp         String   @db.VarChar(6)
  expiry_date DateTime @db.Timestamp(6)
  verified    Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_otp_user")
}

model permissions {
  id                                  String                 @id(map: "PK_920331560282b8bd21bb02290df") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  slug                                String              @unique(map: "UQ_d090ad82a0e97ce764c06c7b312") @db.VarChar(160)
  description                         String              @db.VarChar(60)
  active                              Boolean             @default(true)
  created_at                          DateTime            @default(now()) @db.Timestamptz(6)
  updated_at                          DateTime            @default(now()) @db.Timestamptz(6)
  created_by                          String?             @db.Uuid
  updated_by                          String?             @db.Uuid
  users_permissions_created_byTousers users?              @relation("permissions_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_c398f7100db3e0d9b6a6cd6beaf")
  users_permissions_updated_byTousers users?              @relation("permissions_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_58fae278276b7c2c6dde2bc19a5")
  roles_permissions                   roles_permissions[]
  users_permissions                   users_permissions[]
}

model roles {
  id                            String                 @id(map: "PK_c1433d71a4838793a49dcad46ab") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                          String              @unique(map: "UQ_648e3f5447f725579d7d4ffdfb7") @db.VarChar(50)
  active                        Boolean             @default(true)
  created_at                    DateTime            @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime            @default(now()) @db.Timestamptz(6)
  created_by                    String?             @db.Uuid
  updated_by                    String?             @db.Uuid
  users_roles_created_byTousers users?              @relation("roles_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_4a39f3095781cdd9d6061afaae5")
  users_roles_updated_byTousers users?              @relation("roles_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_747b580d73db0ad78963d78b076")
  roles_permissions             roles_permissions[]
  users_roles                   users_roles[]
}

model roles_permissions {
  role_id                                   String      @db.Uuid
  permission_id                             String      @db.Uuid
  created_by                                String?     @db.Uuid
  updated_by                                String?     @db.Uuid
  users_roles_permissions_created_byTousers users?      @relation("roles_permissions_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_a3f5b9874c55ee69fdd01531e14")
  permissions                               permissions @relation(fields: [permission_id], references: [id], onDelete: NoAction, map: "FK_337aa8dba227a1fe6b73998307b")
  roles                                     roles       @relation(fields: [role_id], references: [id], onDelete: NoAction, map: "FK_7d2dad9f14eddeb09c256fea719")
  users_roles_permissions_updated_byTousers users?      @relation("roles_permissions_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_d1ba552f47d08621fdd2bbb0124")

  @@id([role_id, permission_id], map: "PK_0cd11f0b35c4d348c6ebb9b36b7")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model typeorm_metadata {
  type     String  @db.VarChar
  database String? @db.VarChar
  schema   String? @db.VarChar
  table    String? @db.VarChar
  name     String? @db.VarChar
  value    String?

  @@ignore
}

model users {
  id                                                    String              @id(map: "PK_a3ffb1c0c8416b9fc6f907b7433") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  phone                                                 String              @unique(map: "UQ_a000cca60bcf04454e727699490") @db.VarChar(20)
  first_name                                            String?             @db.VarChar(100)
  last_name                                             String?             @db.VarChar(100)
  password                                              String?             @db.VarChar
  is_super_user                                         Boolean             @default(false)
  status                                                user_status
  created_at                                            DateTime            @default(now()) @db.Timestamptz(6)
  updated_at                                            DateTime            @default(now()) @db.Timestamptz(6)
  otp                                                   otp[]
  permissions_permissions_created_byTousers             permissions[]       @relation("permissions_created_byTousers")
  permissions_permissions_updated_byTousers             permissions[]       @relation("permissions_updated_byTousers")
  post_post_created_byTousers                           post[]              @relation("post_created_byTousers")
  post_updated_byTousers                                post[]              @relation("post_updated_byTousers")
  post_post_user_idTousers                              post[]              @relation("post_user_idTousers")
  roles_roles_created_byTousers                         roles[]             @relation("roles_created_byTousers")
  roles_roles_updated_byTousers                         roles[]             @relation("roles_updated_byTousers")
  roles_permissions_roles_permissions_created_byTousers roles_permissions[] @relation("roles_permissions_created_byTousers")
  roles_permissions_roles_permissions_updated_byTousers roles_permissions[] @relation("roles_permissions_updated_byTousers")
  users_permissions_usersTousers_permissions_created_by users_permissions[] @relation("usersTousers_permissions_created_by")
  users_permissions_usersTousers_permissions_updated_by users_permissions[] @relation("usersTousers_permissions_updated_by")
  users_permissions_usersTousers_permissions_user_id    users_permissions[] @relation("usersTousers_permissions_user_id")
  users_roles_usersTousers_roles_created_by             users_roles[]       @relation("usersTousers_roles_created_by")
  users_roles_usersTousers_roles_updated_by             users_roles[]       @relation("usersTousers_roles_updated_by")
  users_roles_usersTousers_roles_user_id                users_roles[]       @relation("usersTousers_roles_user_id")
  post_prop_types_created_byTousers                       post_prop_types[]         @relation("post_prop_types_created_byTousers")
  post_prop_types_updated_byTousers                       post_prop_types[]         @relation("post_prop_types_updated_byTousers")
  city_created_byTousers                                 city[]                 @relation("city_created_byTousers")
  city_updated_byTousers                                 city[]                 @relation("city_updated_byTousers")
}

model users_permissions {
  user_id                                   String      @db.Uuid
  permission_id                             String      @db.Uuid
  created_by                                String?     @db.Uuid
  updated_by                                String?     @db.Uuid
  users_usersTousers_permissions_created_by users?      @relation("usersTousers_permissions_created_by", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_1139f007de51cfe686c4b2abb43")
  permissions                               permissions @relation(fields: [permission_id], references: [id], onDelete: NoAction, map: "FK_b09b9a210c60f41ec7b453758e9")
  users_usersTousers_permissions_updated_by users?      @relation("usersTousers_permissions_updated_by", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_997b44464224900ee2727190813")
  users_usersTousers_permissions_user_id    users       @relation("usersTousers_permissions_user_id", fields: [user_id], references: [id], onDelete: NoAction, map: "FK_4de7d0b175f702be3be55270023")

  @@id([user_id, permission_id], map: "PK_7f3736984cd8546a1e418005561")
}

model users_roles {
  user_id                             String  @db.Uuid
  role_id                             String  @db.Uuid
  created_by                          String? @db.Uuid
  updated_by                          String? @db.Uuid
  users_usersTousers_roles_created_by users?  @relation("usersTousers_roles_created_by", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_471c7c874c2a37052f53d920803")
  roles                               roles   @relation(fields: [role_id], references: [id], onDelete: NoAction, map: "FK_1cf664021f00b9cc1ff95e17de4")
  users_usersTousers_roles_updated_by users?  @relation("usersTousers_roles_updated_by", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_88da3fa85d1220b0ac18b08ce47")
  users_usersTousers_roles_user_id    users   @relation("usersTousers_roles_user_id", fields: [user_id], references: [id], onDelete: NoAction, map: "FK_e4435209df12bc1f001e5360174")

  @@id([user_id, role_id], map: "PK_c525e9373d63035b9919e578a9c")
}

model city {
  id                           String   @id(map: "PK_city_id") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                         String   @db.VarChar(255)
  parent_id                    String?  @db.Uuid
  created_at                   DateTime @default(now()) @db.Timestamp(6)
  updated_at                   DateTime @default(now()) @db.Timestamp(6)
  created_by                   String?  @db.Uuid
  updated_by                   String?  @db.Uuid
  users_city_created_byTousers users?   @relation("city_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_city_created_by")
  users_city_updated_byTousers users?   @relation("city_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_city_updated_by")
  users_city_parent_idTousers  city?   @relation("city_parent_idTocity", fields: [parent_id], references: [id], onDelete: NoAction, map: "FK_city_parent_id")
  post_city_idTocity          post[] @relation("post_city_idTocity")


  city_parent_idTocity city[] @relation("city_parent_idTocity")
  @@index([created_by], map: "fki_FK_city_created_by")
  @@index([updated_by], map: "fki_FK_city_updated_by")
}

model post {
  id                           String   @id(map: "PK_post_id") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                      String   @db.Uuid
  created_at                   DateTime @default(now()) @db.Timestamp(6)
  updated_at                   DateTime @default(now()) @db.Timestamp(6)
  created_by                   String?  @db.Uuid
  updated_by                   String?  @db.Uuid
  users_post_created_byTousers users?   @relation("post_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_post_created_by")
  users_post_updated_byTousers users?   @relation("post_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_post_updated_by")
  users_post_user_idTousers    users    @relation("post_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, map: "FK_post_user_id")
  price                        Int      @default(0)
  price_type                   price_type @default(fixed)
  status                       status   @default(draft)
  sale_type                    sale_type @default(buy)
  latitude                     Float    @default(0)
  longitude                    Float    @default(0)
  address                      String   @default("")
  comments_count               Int      @default(0)
  city_id                      String   @db.Uuid
  city_city_idTocity city    @relation("post_city_idTocity", fields: [city_id], references: [id], onDelete: NoAction, map: "FK_post_city_id")

  @@index([created_by], map: "fki_FK_post_created_by")
  @@index([updated_by], map: "fki_FK_post_updated_by")
}

model post_prop_types {
  id                           String   @id(map: "PK_post_prop_types_id") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sale_type                    sale_type @default(buy)
  name                         String
  type                         type     @default(string)
  created_at                   DateTime @default(now()) @db.Timestamp(6)
  updated_at                   DateTime @default(now()) @db.Timestamp(6)
  created_by                   String?  @db.Uuid
  updated_by                   String?  @db.Uuid
  users_post_prop_types_created_byTousers users?   @relation("post_prop_types_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_post_prop_types_created_by")
  users_post_prop_types_updated_byTousers users?   @relation("post_prop_types_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_post_prop_types_updated_by")

  @@index([created_by], map: "fki_FK_post_prop_types_created_by")
}

enum user_status {
  active
  blocked
  inactive
}


enum price_type {
  fixed
  perMonth
}

enum status {
  draft
  published
  archived
}

enum sale_type {
  buy
  rent
  new_building
}

enum type {
  string
  integer
  float
  boolean
  date
  datetime
  enum
  json
}
